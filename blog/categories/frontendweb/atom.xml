<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: frontendweb | Petes Stuff]]></title>
  <link href="http://peetjthinkful.github.io/blog/categories/frontendweb/atom.xml" rel="self"/>
  <link href="http://peetjthinkful.github.io/"/>
  <updated>2015-05-19T22:43:40+10:00</updated>
  <id>http://peetjthinkful.github.io/</id>
  <author>
    <name><![CDATA[Pete Januarius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What is a Closure in Javascript]]></title>
    <link href="http://peetjthinkful.github.io/blog/2015/01/07/closures-in-javascript/"/>
    <updated>2015-01-07T11:59:00+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2015/01/07/closures-in-javascript</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>What is a closure in Javascript? This concept eluded me for ages until finally over time I understood what exactly it was and why it was useful. It is actually not that difficult to understand, it&rsquo;s just that often when something is difficult to describe, most people find it difficult to do just that &ndash; describe it simply! Hence I found myself reading many articles telling me that closures are really amazing but not quite explaining why sufficiently enough to satisfy my curiosity.</p>

<h4>Functions and Scope</h4>

<p>Let&rsquo;s look at a simple function:</p>

<pre><code>function myFunc(){
    var myVar = 1;

    // Do something with myVar
    myVar++;
}
</code></pre>

<p>Looking at this function, we can see that when it runs ie. when it is in scope, the variable <code>myVar</code> is also in scope and we can set it or interrogate it or whatever. When the function has completed, however, myVar simply cannot be accessed. It is as if it never existed.</p>

<p>One thing to note about functions is that it is possible to have a function within a function or if you like an &lsquo;inner&rsquo; function. Take a look at the following example:</p>

<pre><code>function myFunc(){
    var myVar = 1;

    // Do something with myVar
    myVar++;

    function myInnerFunc(){
        // NB - We have access to the outer function scope!
        myVar--;
    }
}
</code></pre>

<p>So you can probably see that the inner function <code>myInnerFunc</code> in the example above attempts to access the variable <code>myVar</code> which is declared in the outer function <code>myFunc</code>.</p>

<p>The attempt to access the variable <code>myVar</code> is successful in this case. Why? Because in Javascript an inner function has access to the variables declared in the outer function in which it resides.</p>

<p>With that in mind, what if we wrote the function like this:</p>

<pre><code>function myFunc(){
    var myVar = 1;

    // Do something with myVar
    myVar++;

    var myInnerFunc = function(val){
        // NB - We have access to the outer function scope!
        myVar = val;
        return myVar;
    }

    // Return an object interface
    return {
        callMyInnerFunc: myInnerFunc
    }
}
</code></pre>

<p>This time we are returning <code>myVar</code> from <code>myInnerFunc</code>. The interesting thing here is that once the function <code>myFunc</code> has run, we should not be able to access <code>myVar</code> because it is now out of scope. However, if we copy the function into the Chrome console and then run it we get this:</p>

<pre><code>&gt; obj = myFunc()
Object {callMyInnerFunc: function}

obj.callMyInnerFunc(3)
3
</code></pre>

<p>Interesting eh? The inner function <code>myInnerFunc</code> was called, the result being that it returned the current value of <code>myVar</code> (after setting it) which should have been off limits to us!</p>

<p>Why wasn&rsquo;t it?</p>

<h4>Enter Closures</h4>

<p>Simply put (because quite often it isn&rsquo;t &lsquo;simply put&rsquo; !!) a closure allows us to (indirectly) access local variables that are no longer in scope.</p>

<p>Another way of putting it is that a function&rsquo;s scope is retained after it has been executed.</p>

<p>That means that we can potentially access variable data from the &lsquo;retained scope&rsquo; of a function that we have already run.</p>

<p>Let&rsquo;s look at a couple of potentaially useful situations:</p>

<h5>Encapsulation</h5>

<p>Encapsulation <em>&ldquo;allows selective hiding of properties and methods in an object by building an impenetrable wall to protect the code from accidental corruption&rdquo;</em> &ndash; <a href="http://bit.ly/1y38V5T">Wikipedia</a></p>

<p>The following example simulates encapsulation with a function that creates a &lsquo;Person&rsquo; object. The user of the function is unable to access the local (hidden) variables <code>_dob</code> and <code>_name</code> but can get their values through the accessor functions <code>getTheDob</code> and <code>getTheName</code>. A <em>closure</em> is created around these variables by the accessor functions and the return object interface gives the client code an entry point.</p>

<p>This gives us an obvious use for closures. The creation of Objects utilising private properties and methods. We allow the client code to use the interface that we want them to see and &lsquo;hide&rsquo; the rest.</p>

<pre><code>function createPerson(options){

    /* Create some local variables for our person */
    var _dob = options &amp;&amp; options.dob ? options.dob : "08/01/1947";
    var _name = options &amp;&amp; options.name ? options.name : "David Jones";

    /* Create our accessor functions */
    var getDob = function(){
        return _dob;
    }

    var getName = function(){
        return _name;
    }       

    /* Specify our person interface that we will return to the user */
    return {
        getTheName: getName,
        getTheDob: getDob
    }
}
</code></pre>

<h5>Creating a function within a loop</h5>

<p>A common Javascript &ldquo;gotcha&rdquo; is the &lsquo;looping problem&rsquo;. This occurs where you create a function within a loop. Take this example where you may expect the loop counter variable to retain itself within the function even though it is changing within the loops context with each iteration:</p>

<pre><code>var myItems = [ e1, e2, e3, e4, e5, e6, e7, e8, e9, e10 ]; /* 10 DOM Elements */

for (var i = 0; i &lt; myItems.length; ++i) {
    myItems[i].onclick = function() {
        console.log( 'You clicked element: ' + i );
    };
}   
</code></pre>

<p>By the time any of the elements are clicked on, i is now 9, which means the message that you will always get is &ldquo;You clicked element: 9&rdquo;.</p>

<p>This is something that is easy to get caught out on and sometimes it can be difficult to find the source of the problem.</p>

<p>The problem can be solved by creating a function that is called on every iteration of the loop while passing <code>i</code>. The act of calling the function will create a new execution context where the value of <code>i</code> is retained and can be used in the returned function. Thus:</p>

<pre><code>function getClickHandler(n) {
    return function() {
        console.log( 'You clicked element: ' + n );
    };
}

for (var i = 0; i &lt; myItems.length; ++i) {
    myItems[i].onclick = getClickHandler(i);
}
</code></pre>

<p>It is worth noting that a common shortcut can be used to create and call the function at the same time. This is what is known as an Immediately-Invoked-Function-Expression:</p>

<pre><code>for (var i = 0; i &lt; myItems.length; ++i) {
    myItems[i].onclick = (function(n){
        return function() {
            console.log( 'You clicked element: ' + n );
        };
    })(i);
}
</code></pre>

<p>This way tends to be used more often as it is more concise.</p>

<p>So there it is!</p>

<p>Hopefully this has given you a bit of a taste for closures, what they are and how to use them. I would like to reference the following posts as they helped me in the writing of this article:</p>

<p><a href="http://james.padolsey.com/javascript/closures-in-javascript/">Closures in Javascript &ndash; James Padolsey</a></p>

<p><a href="http://javascriptissexy.com/understand-javascript-closures-with-ease/">Understand Javascript Closures with ease</a></p>

<p><a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">Ben Alman</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles of development #3 - Structure]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/11/27/principles-of-dev-3-structure/"/>
    <updated>2014-11-27T13:15:20+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/11/27/principles-of-dev-3-structure</id>
    <content type="html"><![CDATA[<h3>Level: Beginner</h3>

<p>If you have followed along so far, you will know that a good frontend architecture should consist of a set of interconnected components that embrace a decoupled and simple design. In this post we are looking at structure. Each component or set of components should follow a certain structure that should be meaningful and easy to follow (simple enough). Make sure that everything contained within your code is there for a reason. This will help structure and simplify.</p>

<p>Note that this applies whether you are using a &lsquo;framework&rsquo; or not. Framework code can still be messy, complex and hard to follow. I know this because I have worked with code bases that although built on a framework are very difficult to follow and debug. Learn to structure your code <em>without</em> using a framework first and then move on to the complexity of frameworks!.</p>

<h3>Structured HTML</h3>

<p>For most websites, unless you are doing a complex single page application (in which case you probably won&rsquo;t be reading this!), the structure is going to be very similar. The page will start with a header with some navigation followed by the main body of content and finally a footer. Believe me &ndash; after looking at thousands of pages over the years I have found this to be true. In effect, your page will look like this:</p>

<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My Page Like Everyone Elses&lt;/title&gt;
        &lt;!-- Insert stylesheets here --&gt;
        &lt;link rel="stylesheet" href="my.css"/&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;header&gt;
            &lt;nav&gt;&lt;!-- Insert navigation here --&gt;&lt;/nav&gt;
        &lt;/header&gt;
        &lt;div id="wrapper"&gt;
            &lt;!-- Main body of content here --&gt;
        &lt;/div&gt;
        &lt;footer&gt;
            &lt;!-- Insert footer here --&gt;
        &lt;/footer&gt;

        &lt;!-- Insert scripts here --&gt;
        &lt;script src="my.js"&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>Structured CSS</h3>

<p>CSS is kind of like walking through mud &ndash; it&rsquo;s messy and it sticks to you! Some people seem to love it and there is a swath of websites dedicated to it. For myself, I can pretty much style any site you throw at me to look how I want, but the CSS is not always pretty!</p>

<p>An obvious path to structured CSS is to use technologies that pre-compile it for you such as LESS and SASS, however we will not be looking at either one of these tools. At the end of the day they introduce yet another thing to do and ensure that it works correctly! If the technology fails or errors occur then you need to know how to handle/fix these. Remember there is no such thing as a silver bullet no matter how great the technology is. If you introduce more technologies into your stack then expect more issues! Pessimistic ? Maybe!</p>

<ol>
<li><p>Include a CSS Reset</p>

<p> You will find that a CSS reset normalizes browser differences so it is important to use one if you are developing for several browsers. The one that I have seen come up time and again is <a href="http://meyerweb.com/eric/tools/css/reset/" title="Eric Meyer CSS Reset">Eric Meyer&rsquo;s reset</a></p></li>
<li><p>Use as few CSS files as possible</p>

<p> This is just common sense really. If you can get away with a single CSS file then just use one file but if it gets too long (say a few thousand lines) you will need to split it up into locical units. It isn&rsquo;t an issue if at production you are concatenating your CSS file together into one file but otherwise having many CSS files will slow down your page load time due to several more requests than necessary.</p></li>
<li><p>Put global element styles at the top</p>

<p> Put simply, place styles for any HTML elements at the top of your CSS file. These are all your global styles. This makes things easier to maintain.</p></li>
<li><p>Use Ids</p>

<p> Ids are faster. If your HTML element warrants an ID, then give it one &ndash; then use it in your CSS to style it.</p></li>
<li><p>Beware of Classitis</p>

<p> There is often a tendency especially by novice developers to create hundreds of classes when styling your HTML. This makes your code hard to maintain, therefore only create a class when you need one ie. ensure you have a reason for doing so. Classes should be reused across several elements when used properly, otherwise you probably don&rsquo;t need one.</p></li>
</ol>


<h3>Structured Javascript</h3>

<p>This is an interesting one because you could get so many opinions here. I am going to make this particular post jQuery specific because most projects out there use it and because I use it on pretty much everything I build. The principle stays the same &ndash; it just has to be adapted. Oh and remember that we aren&rsquo;t assuming any frameworks like Backbone, Angular or Embers.</p>

<p>I find that I need the same kinds of functions over and over again so I have a simple way of writing my javascript. Firstly the file structure. I normally would have the following files in a project:</p>

<pre><code>jquery.js
main.js
utils.js
</code></pre>

<p>Obviously this is going to be a smallish project where we only have a couple of javascript files. <code>utils.js</code> contains any generic utility functions that we require. Our application code will sit in <code>main.js</code></p>

<h4>Inside main.js</h4>

<p>Our main goal here is to prevent writing <em>spaghetti</em> code which is often the case with jQuery beginners unsurprisingly given the nature of jQuery. Once you get over things like thinking you are clever after chaining a dozen operations together, it&rsquo;s pretty good. We could point out many ideas based on js structure but we are only going to cover a few key ones. Others such as variable naming conventions are covered by many other articles around the web.</p>

<h5>Keep the document.ready() function very simple</h5>

<pre><code>    $( document ).ready(function() {
        init();
    });

All we have in our example above is an initialisation function. You may want to pass in an options object as well:

    init({ "version": "1.0" })
</code></pre>

<h5>Use an <code>init()</code> function to setup your program&rsquo;s initial application state.</h5>

<p>Put your initialisation code in one place. Initialisation code should setup the initial state of the program, ie. all necessary variables created and set to the correct values. Why do we do this? The organisational benefits are obvious. It is clean and clear and will be easy for anyone on your team to pick up and understand when you are off sick.</p>

<p>Tip: When you are developing, think of others and not just yourself. Your code will end up being clearer and more accessible to members of your team.</p>

<h5>Setup your bindings in one place</h5>

<p>I&rsquo;ve always found it best to set up all of my event handlers in one function such as initBindings(). This invariably means that I can easily trace a user&rsquo;s path through the application because I know exactly where the code is going to start. If your application is only a few hundred lines it probably doesn&rsquo;t really matter, however it is good to get into a structured mindset right away because you may find that your code ends up being 50,000 lines long. In this case it will still be just as easy to trace through your code if you have structured it this way.</p>

<h5>Breakup event handlers into discrete functions</h5>

<p>So once inside an event handler the tendency for beginners is to write lots of confusing jQuery with huge chains of calls. You need to check those items in the chain that have a chance of returning &lsquo;null&rsquo; &ndash; in other words don&rsquo;t write huge lists of chained calls &ndash; make 2 or 3 chained calls the maximum and agree on a standard with your team. I know it&rsquo;s tempting to do this&hellip;</p>

<pre><code>a().b().c().d().e().f();
</code></pre>

<p>&hellip;but I don&rsquo;t believe it is a great practice.</p>

<p><strong>Tip:</strong> Don&rsquo;t chain a lot of jQuery calls together. Any one of those calls may return &lsquo;null&rsquo; or &lsquo;undefined&rsquo;, in which case your program will immediately break!</p>

<p>So &ndash; back to the point! Consider what you want to do in the event handler from an application point of view. For example, you may have an event handler on the click of a button that creates a new widget. Create your event handler a bit like this:</p>

<pre><code>$('#btnNewWidget').on('click', function(event){
    /* Lets create a new widget! */
    createNewWidget(this, event);
});
</code></pre>

<p>It beats a lot of confusing jQuery doesn&rsquo;t it. The advantage here is that it is obvious to you what is going on in the program flow even if you have to come back to this code in 6 months because of some maintenance that you need to do. You (and your team mates for that matter) will instantly know what is going on purely because of the way you named the function.</p>

<h5>If you must use global variables, call them out!</h5>

<p>Hmm&hellip; did I actually say that? Yes I did. You will find that when you start writing Javascript, you will probably (unless you are from another programming background&hellip;.but even then!) start creating lots of global variables everywhere! So here is the advice. Until you know about namespaces and/or modules you will be doing this because it is far too easy to do in Javascript. Just face it and do it and learn with the language. Ok I&rsquo;m nearly at the advice. Here it is&hellip; minimise the amount of globals and prefix them with something like &lsquo;underscore&rsquo; eg:</p>

<pre><code>__aGlobalVarIAm
</code></pre>

<p>Note that I &lsquo;double&rsquo; underscored it just for emphasis. Note also the camel casing and the Dr Seuss like var (you can ignore the last one!)</p>

<h3>Summary</h3>

<p>For me it comes down to 2 things: Writing maintainable code and making the user happy. You will know if your code is maintainable after several months on the same project because invariably you will have to enhance it when your users actually realise what they really want to do. As for making your users happy, that is an altogether different thing, but if you structure your code and structure your project &amp; deliverables, you have a chance of success!</p>

<p><img src="/images/maintainable-code-dilbert.gif" title="Writing Maintainable Code" alt="Writing Maintainable Code" /></p>

<p><strong>Image of the day</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles of development #2 - Decoupling]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/11/21/principles-of-dev-2-decoupling/"/>
    <updated>2014-11-21T13:15:20+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/11/21/principles-of-dev-2-decoupling</id>
    <content type="html"><![CDATA[<p>I was once asked in an interview by a very smart architect to describe the most important aspects of a good architecture. I replied that it should be simple and decoupled. Fortunately he agreed with me although I didn&rsquo;t end up working for the company!</p>

<p>I believe that if you have these 2 things going for you then you are off to a great start. Often, other facets of a good architecture follow from these two principles. For example &lsquo;extensibility&rsquo; &ndash; the ease of adding new and extra functionality to your existing system. A decoupled system will certainly enable you to add new parts with minimal fuss.</p>

<p>The key here is dependency. In a decoupled system, each &lsquo;component&rsquo; works without needing the other components in the system ie. a given component is not dependent on any other. If it were, then we wouldn&rsquo;t even be able to load and initialise it without loading some other component first.</p>

<p>So, how does such a system work. Well one way of making this work is by implementing some kind of message layer. Components talk to each other by passing and receiving  messages. Let&rsquo;s look at an example to round things off.</p>

<p>Let&rsquo;s imagine that our system is made up of a mapping component (MP1) and a graphing component (G1). The job of MP1 is to display a map of Australia revealing the 50 hottest places last summer. These show up as &lsquo;hot spots&rsquo; on the map when it is rendered. MP1 then &lsquo;publishes&rsquo; a message to the message layer. The message itself contains an identifier and a payload. The identifier is just a name &ndash; let&rsquo;s call it &lsquo;HOTSPOT_DATA_MSG&rsquo;. The payload contains some structured data obviously related to the top 50 hotspots.</p>

<p>Meanwhile, G1 has informed the message layer that it would like to know about any message with the name HOTSPOT_DATA_MSG &ndash; in other words it &lsquo;subscribes&rsquo; to a message with a particular name. Whenever such a message is sent, G1 receives it and displays a nice graph of the temperatures of the 50 hottest places in Australia.</p>

<p>You will notice that there is a single dependency in this kind of a system. every component is dependent on the messaging layer component which itself exists just to send and receive messages between components like a kind of telephone exchange operator. This enables components to both co-exist without depending on each other. The only dependencies are the core aspects of the system.</p>

<p><img src="/images/component-messaging.png" title="Component Messaging" alt="alt text" /></p>

<p><strong>Decoupling Components</strong></p>
]]></content>
  </entry>
  
</feed>
