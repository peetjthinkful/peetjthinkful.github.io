<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Petes Stuff]]></title>
  <link href="http://peetjthinkful.github.io/atom.xml" rel="self"/>
  <link href="http://peetjthinkful.github.io/"/>
  <updated>2015-05-24T20:19:58+10:00</updated>
  <id>http://peetjthinkful.github.io/</id>
  <author>
    <name><![CDATA[Pete Januarius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Error Handling in Javascript]]></title>
    <link href="http://peetjthinkful.github.io/blog/2015/05/08/error-handling-in-javascript/"/>
    <updated>2015-05-08T13:13:26+10:00</updated>
    <id>http://peetjthinkful.github.io/blog/2015/05/08/error-handling-in-javascript</id>
    <content type="html"><![CDATA[<h2>Why do we bother handling Errors</h2>

<h2>A Simple Error Handler</h2>

<h2>A More complex Example</h2>

<h2>References</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is a Closure in Javascript]]></title>
    <link href="http://peetjthinkful.github.io/blog/2015/01/07/closures-in-javascript/"/>
    <updated>2015-01-07T11:59:00+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2015/01/07/closures-in-javascript</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>What is a closure in Javascript? This concept eluded me for ages until finally over time I understood what exactly it was and why it was useful. It is actually not that difficult to understand, it&rsquo;s just that often when something is difficult to describe, most people find it difficult to do just that &ndash; describe it simply! Hence I found myself reading many articles telling me that closures are really amazing but not quite explaining why sufficiently enough to satisfy my curiosity.</p>

<h4>Functions and Scope</h4>

<p>Let&rsquo;s look at a simple function:</p>

<pre><code>function myFunc(){
    var myVar = 1;

    // Do something with myVar
    myVar++;
}
</code></pre>

<p>Looking at this function, we can see that when it runs ie. when it is in scope, the variable <code>myVar</code> is also in scope and we can set it or interrogate it or whatever. When the function has completed, however, myVar simply cannot be accessed. It is as if it never existed.</p>

<p>One thing to note about functions is that it is possible to have a function within a function or if you like an &lsquo;inner&rsquo; function. Take a look at the following example:</p>

<pre><code>function myFunc(){
    var myVar = 1;

    // Do something with myVar
    myVar++;

    function myInnerFunc(){
        // NB - We have access to the outer function scope!
        myVar--;
    }
}
</code></pre>

<p>So you can probably see that the inner function <code>myInnerFunc</code> in the example above attempts to access the variable <code>myVar</code> which is declared in the outer function <code>myFunc</code>.</p>

<p>The attempt to access the variable <code>myVar</code> is successful in this case. Why? Because in Javascript an inner function has access to the variables declared in the outer function in which it resides.</p>

<p>With that in mind, what if we wrote the function like this:</p>

<pre><code>function myFunc(){
    var myVar = 1;

    // Do something with myVar
    myVar++;

    var myInnerFunc = function(val){
        // NB - We have access to the outer function scope!
        myVar = val;
        return myVar;
    }

    // Return an object interface
    return {
        callMyInnerFunc: myInnerFunc
    }
}
</code></pre>

<p>This time we are returning <code>myVar</code> from <code>myInnerFunc</code>. The interesting thing here is that once the function <code>myFunc</code> has run, we should not be able to access <code>myVar</code> because it is now out of scope. However, if we copy the function into the Chrome console and then run it we get this:</p>

<pre><code>&gt; obj = myFunc()
Object {callMyInnerFunc: function}

obj.callMyInnerFunc(3)
3
</code></pre>

<p>Interesting eh? The inner function <code>myInnerFunc</code> was called, the result being that it returned the current value of <code>myVar</code> (after setting it) which should have been off limits to us!</p>

<p>Why wasn&rsquo;t it?</p>

<h4>Enter Closures</h4>

<p>Simply put (because quite often it isn&rsquo;t &lsquo;simply put&rsquo; !!) a closure allows us to (indirectly) access local variables that are no longer in scope.</p>

<p>Another way of putting it is that a function&rsquo;s scope is retained after it has been executed.</p>

<p>That means that we can potentially access variable data from the &lsquo;retained scope&rsquo; of a function that we have already run.</p>

<p>Let&rsquo;s look at a couple of potentaially useful situations:</p>

<h5>Encapsulation</h5>

<p>Encapsulation <em>&ldquo;allows selective hiding of properties and methods in an object by building an impenetrable wall to protect the code from accidental corruption&rdquo;</em> &ndash; <a href="http://bit.ly/1y38V5T">Wikipedia</a></p>

<p>The following example simulates encapsulation with a function that creates a &lsquo;Person&rsquo; object. The user of the function is unable to access the local (hidden) variables <code>_dob</code> and <code>_name</code> but can get their values through the accessor functions <code>getTheDob</code> and <code>getTheName</code>. A <em>closure</em> is created around these variables by the accessor functions and the return object interface gives the client code an entry point.</p>

<p>This gives us an obvious use for closures. The creation of Objects utilising private properties and methods. We allow the client code to use the interface that we want them to see and &lsquo;hide&rsquo; the rest.</p>

<pre><code>function createPerson(options){

    /* Create some local variables for our person */
    var _dob = options &amp;&amp; options.dob ? options.dob : "08/01/1947";
    var _name = options &amp;&amp; options.name ? options.name : "David Jones";

    /* Create our accessor functions */
    var getDob = function(){
        return _dob;
    }

    var getName = function(){
        return _name;
    }       

    /* Specify our person interface that we will return to the user */
    return {
        getTheName: getName,
        getTheDob: getDob
    }
}
</code></pre>

<h5>Creating a function within a loop</h5>

<p>A common Javascript &ldquo;gotcha&rdquo; is the &lsquo;looping problem&rsquo;. This occurs where you create a function within a loop. Take this example where you may expect the loop counter variable to retain itself within the function even though it is changing within the loops context with each iteration:</p>

<pre><code>var myItems = [ e1, e2, e3, e4, e5, e6, e7, e8, e9, e10 ]; /* 10 DOM Elements */

for (var i = 0; i &lt; myItems.length; ++i) {
    myItems[i].onclick = function() {
        console.log( 'You clicked element: ' + i );
    };
}   
</code></pre>

<p>By the time any of the elements are clicked on, i is now 9, which means the message that you will always get is &ldquo;You clicked element: 9&rdquo;.</p>

<p>This is something that is easy to get caught out on and sometimes it can be difficult to find the source of the problem.</p>

<p>The problem can be solved by creating a function that is called on every iteration of the loop while passing <code>i</code>. The act of calling the function will create a new execution context where the value of <code>i</code> is retained and can be used in the returned function. Thus:</p>

<pre><code>function getClickHandler(n) {
    return function() {
        console.log( 'You clicked element: ' + n );
    };
}

for (var i = 0; i &lt; myItems.length; ++i) {
    myItems[i].onclick = getClickHandler(i);
}
</code></pre>

<p>It is worth noting that a common shortcut can be used to create and call the function at the same time. This is what is known as an Immediately-Invoked-Function-Expression:</p>

<pre><code>for (var i = 0; i &lt; myItems.length; ++i) {
    myItems[i].onclick = (function(n){
        return function() {
            console.log( 'You clicked element: ' + n );
        };
    })(i);
}
</code></pre>

<p>This way tends to be used more often as it is more concise.</p>

<p>So there it is!</p>

<p>Hopefully this has given you a bit of a taste for closures, what they are and how to use them. I would like to reference the following posts as they helped me in the writing of this article:</p>

<p><a href="http://james.padolsey.com/javascript/closures-in-javascript/">Closures in Javascript &ndash; James Padolsey</a></p>

<p><a href="http://javascriptissexy.com/understand-javascript-closures-with-ease/">Understand Javascript Closures with ease</a></p>

<p><a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">Ben Alman</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles of development #3 - Structure]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/11/27/principles-of-dev-3-structure/"/>
    <updated>2014-11-27T13:15:20+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/11/27/principles-of-dev-3-structure</id>
    <content type="html"><![CDATA[<h3>Level: Beginner</h3>

<p>If you have followed along so far, you will know that a good frontend architecture should consist of a set of interconnected components that embrace a decoupled and simple design. In this post we are looking at structure. Each component or set of components should follow a certain structure that should be meaningful and easy to follow (simple enough). Make sure that everything contained within your code is there for a reason. This will help structure and simplify.</p>

<p>Note that this applies whether you are using a &lsquo;framework&rsquo; or not. Framework code can still be messy, complex and hard to follow. I know this because I have worked with code bases that although built on a framework are very difficult to follow and debug. Learn to structure your code <em>without</em> using a framework first and then move on to the complexity of frameworks!.</p>

<h3>Structured HTML</h3>

<p>For most websites, unless you are doing a complex single page application (in which case you probably won&rsquo;t be reading this!), the structure is going to be very similar. The page will start with a header with some navigation followed by the main body of content and finally a footer. Believe me &ndash; after looking at thousands of pages over the years I have found this to be true. In effect, your page will look like this:</p>

<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My Page Like Everyone Elses&lt;/title&gt;
        &lt;!-- Insert stylesheets here --&gt;
        &lt;link rel="stylesheet" href="my.css"/&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;header&gt;
            &lt;nav&gt;&lt;!-- Insert navigation here --&gt;&lt;/nav&gt;
        &lt;/header&gt;
        &lt;div id="wrapper"&gt;
            &lt;!-- Main body of content here --&gt;
        &lt;/div&gt;
        &lt;footer&gt;
            &lt;!-- Insert footer here --&gt;
        &lt;/footer&gt;

        &lt;!-- Insert scripts here --&gt;
        &lt;script src="my.js"&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h3>Structured CSS</h3>

<p>CSS is kind of like walking through mud &ndash; it&rsquo;s messy and it sticks to you! Some people seem to love it and there is a swath of websites dedicated to it. For myself, I can pretty much style any site you throw at me to look how I want, but the CSS is not always pretty!</p>

<p>An obvious path to structured CSS is to use technologies that pre-compile it for you such as LESS and SASS, however we will not be looking at either one of these tools. At the end of the day they introduce yet another thing to do and ensure that it works correctly! If the technology fails or errors occur then you need to know how to handle/fix these. Remember there is no such thing as a silver bullet no matter how great the technology is. If you introduce more technologies into your stack then expect more issues! Pessimistic ? Maybe!</p>

<ol>
<li><p>Include a CSS Reset</p>

<p> You will find that a CSS reset normalizes browser differences so it is important to use one if you are developing for several browsers. The one that I have seen come up time and again is <a href="http://meyerweb.com/eric/tools/css/reset/" title="Eric Meyer CSS Reset">Eric Meyer&rsquo;s reset</a></p></li>
<li><p>Use as few CSS files as possible</p>

<p> This is just common sense really. If you can get away with a single CSS file then just use one file but if it gets too long (say a few thousand lines) you will need to split it up into locical units. It isn&rsquo;t an issue if at production you are concatenating your CSS file together into one file but otherwise having many CSS files will slow down your page load time due to several more requests than necessary.</p></li>
<li><p>Put global element styles at the top</p>

<p> Put simply, place styles for any HTML elements at the top of your CSS file. These are all your global styles. This makes things easier to maintain.</p></li>
<li><p>Use Ids</p>

<p> Ids are faster. If your HTML element warrants an ID, then give it one &ndash; then use it in your CSS to style it.</p></li>
<li><p>Beware of Classitis</p>

<p> There is often a tendency especially by novice developers to create hundreds of classes when styling your HTML. This makes your code hard to maintain, therefore only create a class when you need one ie. ensure you have a reason for doing so. Classes should be reused across several elements when used properly, otherwise you probably don&rsquo;t need one.</p></li>
</ol>


<h3>Structured Javascript</h3>

<p>This is an interesting one because you could get so many opinions here. I am going to make this particular post jQuery specific because most projects out there use it and because I use it on pretty much everything I build. The principle stays the same &ndash; it just has to be adapted. Oh and remember that we aren&rsquo;t assuming any frameworks like Backbone, Angular or Embers.</p>

<p>I find that I need the same kinds of functions over and over again so I have a simple way of writing my javascript. Firstly the file structure. I normally would have the following files in a project:</p>

<pre><code>jquery.js
main.js
utils.js
</code></pre>

<p>Obviously this is going to be a smallish project where we only have a couple of javascript files. <code>utils.js</code> contains any generic utility functions that we require. Our application code will sit in <code>main.js</code></p>

<h4>Inside main.js</h4>

<p>Our main goal here is to prevent writing <em>spaghetti</em> code which is often the case with jQuery beginners unsurprisingly given the nature of jQuery. Once you get over things like thinking you are clever after chaining a dozen operations together, it&rsquo;s pretty good. We could point out many ideas based on js structure but we are only going to cover a few key ones. Others such as variable naming conventions are covered by many other articles around the web.</p>

<h5>Keep the document.ready() function very simple</h5>

<pre><code>    $( document ).ready(function() {
        init();
    });

All we have in our example above is an initialisation function. You may want to pass in an options object as well:

    init({ "version": "1.0" })
</code></pre>

<h5>Use an <code>init()</code> function to setup your program&rsquo;s initial application state.</h5>

<p>Put your initialisation code in one place. Initialisation code should setup the initial state of the program, ie. all necessary variables created and set to the correct values. Why do we do this? The organisational benefits are obvious. It is clean and clear and will be easy for anyone on your team to pick up and understand when you are off sick.</p>

<p>Tip: When you are developing, think of others and not just yourself. Your code will end up being clearer and more accessible to members of your team.</p>

<h5>Setup your bindings in one place</h5>

<p>I&rsquo;ve always found it best to set up all of my event handlers in one function such as initBindings(). This invariably means that I can easily trace a user&rsquo;s path through the application because I know exactly where the code is going to start. If your application is only a few hundred lines it probably doesn&rsquo;t really matter, however it is good to get into a structured mindset right away because you may find that your code ends up being 50,000 lines long. In this case it will still be just as easy to trace through your code if you have structured it this way.</p>

<h5>Breakup event handlers into discrete functions</h5>

<p>So once inside an event handler the tendency for beginners is to write lots of confusing jQuery with huge chains of calls. You need to check those items in the chain that have a chance of returning &lsquo;null&rsquo; &ndash; in other words don&rsquo;t write huge lists of chained calls &ndash; make 2 or 3 chained calls the maximum and agree on a standard with your team. I know it&rsquo;s tempting to do this&hellip;</p>

<pre><code>a().b().c().d().e().f();
</code></pre>

<p>&hellip;but I don&rsquo;t believe it is a great practice.</p>

<p><strong>Tip:</strong> Don&rsquo;t chain a lot of jQuery calls together. Any one of those calls may return &lsquo;null&rsquo; or &lsquo;undefined&rsquo;, in which case your program will immediately break!</p>

<p>So &ndash; back to the point! Consider what you want to do in the event handler from an application point of view. For example, you may have an event handler on the click of a button that creates a new widget. Create your event handler a bit like this:</p>

<pre><code>$('#btnNewWidget').on('click', function(event){
    /* Lets create a new widget! */
    createNewWidget(this, event);
});
</code></pre>

<p>It beats a lot of confusing jQuery doesn&rsquo;t it. The advantage here is that it is obvious to you what is going on in the program flow even if you have to come back to this code in 6 months because of some maintenance that you need to do. You (and your team mates for that matter) will instantly know what is going on purely because of the way you named the function.</p>

<h5>If you must use global variables, call them out!</h5>

<p>Hmm&hellip; did I actually say that? Yes I did. You will find that when you start writing Javascript, you will probably (unless you are from another programming background&hellip;.but even then!) start creating lots of global variables everywhere! So here is the advice. Until you know about namespaces and/or modules you will be doing this because it is far too easy to do in Javascript. Just face it and do it and learn with the language. Ok I&rsquo;m nearly at the advice. Here it is&hellip; minimise the amount of globals and prefix them with something like &lsquo;underscore&rsquo; eg:</p>

<pre><code>__aGlobalVarIAm
</code></pre>

<p>Note that I &lsquo;double&rsquo; underscored it just for emphasis. Note also the camel casing and the Dr Seuss like var (you can ignore the last one!)</p>

<h3>Summary</h3>

<p>For me it comes down to 2 things: Writing maintainable code and making the user happy. You will know if your code is maintainable after several months on the same project because invariably you will have to enhance it when your users actually realise what they really want to do. As for making your users happy, that is an altogether different thing, but if you structure your code and structure your project &amp; deliverables, you have a chance of success!</p>

<p><img src="http://peetjthinkful.github.io/images/maintainable-code-dilbert.gif" title="Writing Maintainable Code" alt="Writing Maintainable Code" /></p>

<p><strong>Image of the day</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles of development #2 - Decoupling]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/11/21/principles-of-dev-2-decoupling/"/>
    <updated>2014-11-21T13:15:20+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/11/21/principles-of-dev-2-decoupling</id>
    <content type="html"><![CDATA[<p>I was once asked in an interview by a very smart architect to describe the most important aspects of a good architecture. I replied that it should be simple and decoupled. Fortunately he agreed with me although I didn&rsquo;t end up working for the company!</p>

<p>I believe that if you have these 2 things going for you then you are off to a great start. Often, other facets of a good architecture follow from these two principles. For example &lsquo;extensibility&rsquo; &ndash; the ease of adding new and extra functionality to your existing system. A decoupled system will certainly enable you to add new parts with minimal fuss.</p>

<p>The key here is dependency. In a decoupled system, each &lsquo;component&rsquo; works without needing the other components in the system ie. a given component is not dependent on any other. If it were, then we wouldn&rsquo;t even be able to load and initialise it without loading some other component first.</p>

<p>So, how does such a system work. Well one way of making this work is by implementing some kind of message layer. Components talk to each other by passing and receiving  messages. Let&rsquo;s look at an example to round things off.</p>

<p>Let&rsquo;s imagine that our system is made up of a mapping component (MP1) and a graphing component (G1). The job of MP1 is to display a map of Australia revealing the 50 hottest places last summer. These show up as &lsquo;hot spots&rsquo; on the map when it is rendered. MP1 then &lsquo;publishes&rsquo; a message to the message layer. The message itself contains an identifier and a payload. The identifier is just a name &ndash; let&rsquo;s call it &lsquo;HOTSPOT_DATA_MSG&rsquo;. The payload contains some structured data obviously related to the top 50 hotspots.</p>

<p>Meanwhile, G1 has informed the message layer that it would like to know about any message with the name HOTSPOT_DATA_MSG &ndash; in other words it &lsquo;subscribes&rsquo; to a message with a particular name. Whenever such a message is sent, G1 receives it and displays a nice graph of the temperatures of the 50 hottest places in Australia.</p>

<p>You will notice that there is a single dependency in this kind of a system. every component is dependent on the messaging layer component which itself exists just to send and receive messages between components like a kind of telephone exchange operator. This enables components to both co-exist without depending on each other. The only dependencies are the core aspects of the system.</p>

<p><img src="http://peetjthinkful.github.io/images/component-messaging.png" title="Component Messaging" alt="alt text" /></p>

<p><strong>Decoupling Components</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Principles of development #1 - Simplicity]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/11/20/principles-of-dev-1-simplicity/"/>
    <updated>2014-11-20T13:15:20+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/11/20/principles-of-dev-1-simplicity</id>
    <content type="html"><![CDATA[<p>One of the most important factors to keep in mind when developing any non-trivial application is maintenence. If an issue arises or additional functionality needs to be built then a simplified design &amp; architecture will go a long way to help you either fix the issue or build the new functionality.</p>

<p>Simplification of the architecture means less connection points between different areas of the application which in turns means less potential for bugs.</p>

<p>Any project with more than a single developer will invariably mean that one day you will have to hand over your code (probably many thousands of lines of Javascript or something similar!) to your team mate while you go off skiing for a week. Well let&rsquo;s hope your design is as simple as you can make it because otherwise he or she will give you the cold shoulder when you get back!!</p>

<p>Seriously though, simplicity means a reusable and extensible system. Not to mention that such things are more fun to work on than over-engineered monstrosities. I personally have worked with components that were so complex in their design that I was at a total loss when any adjustments had to be made. I have subsequently worked with components that have the same functionality but were incredibly simple to use and work with. Sometimes developers are too clever for their own good!</p>

<p>Next time you have to design and code something, think of your team mates as well as your users&hellip;and keep it simple!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backups, backups and more backups]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/11/08/backups-backups/"/>
    <updated>2014-11-08T19:07:00+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/11/08/backups-backups</id>
    <content type="html"><![CDATA[<p>You would&rsquo;ve thought that I had learnt my lesson when it comes to backing up my files. I think I  must have helped dozens of friends over the years who had lost a critical file and hadn&rsquo;t made a backup. Well I managed to do exactly the same thing at work the other day.</p>

<p>I was working in <a href="http://www.sublimetext.com/">Sublime Text 3</a> on Windows and managed to lose a mornings work &ndash; Doh! I quickly realised that I had no local history and hadn&rsquo;t committed to any repository for a while. Hmmmm&hellip; what to do! Well nothing actually, I just had to write all the code again !!!</p>

<p>I did, however find a nice local history plugin for Sublime Text which is really the point of this post. No more troubles!</p>

<p><a href="https://github.com/vishr/local-history">Local History</a> is a Sublime Text (2 &amp; 3) plugin for maintaining local history of files. [backup | open | compare | incremental diff].</p>

<p>It helps if you have the <a href="https://sublime.wbond.net/">package installer</a> for ST. In this case just type &lsquo;Local History&rsquo; at the install package prompt and there you go.</p>

<p>Once installed, I just configured the user settings to have a <code>history_retention</code> of 90 days:</p>

<pre><code>{
  "history_retention": 90, // in days
}
</code></pre>

<p>Seems to work really well!</p>

<p>Another backup solution that I have signed up for is <a href="https://www.zipcloud.com/planprice-information">ZipCloud</a>. I&rsquo;ve included a link to the pricing page as it is difficult to find. You only get a few Gig if you get the free plan so I upgraded to the Premium Plan and am paying about 7 USD per month.</p>

<p>The reason I needed it is that I am upgrading my Mac to Yosemite and don&rsquo;t really have an adequate backup solution. After running the backup client for about 2 weeks (yes really!), I finally backed up everything. It was quite impressive as I just had to pause it everytime I needed to &ndash; other than that I ran it constantly.</p>

<p>It is finally done and I can now upgrade. Yay!</p>

<p><img src="../images/backup.gif" title="Backups, backups" alt="Backups by ahajokes.com" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone_photo_app]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/09/06/iphone-photo-app/"/>
    <updated>2014-09-06T12:15:20+10:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/09/06/iphone-photo-app</id>
    <content type="html"><![CDATA[<h3>Rethinking the design of the &lsquo;unlock&rsquo; screen</h3>

<p>If you possess an iPhone, then you will be somewhat familiar with the &lsquo;unlock&rsquo; screen. It would look something like this:</p>

<p><img src="http://peetjthinkful.github.io/images/unlockscreen.png" title="Title" alt="alt text" /></p>

<p><strong>My iPhone unlock screen</strong></p>

<p>The problem I have is that I have quite small hands and being right handed I generally carry my phone in my left hand and use it with my right. &lsquo;So what?&rsquo; you might say! Well when I want to take a picture quickly I try to use my left hand to activate the camera from the camera icon. I usually find the swipe action next to impossible. Firstly my thumb doesn&rsquo;t really reach the icon without a stretch and secondly, because I have to stretch I find that I don&rsquo;t have much mobility in my thumb as a consequence.</p>

<p><img src="http://peetjthinkful.github.io/images/unlockscreen2.jpg" title="Title" alt="alt text" /></p>

<p><strong>Me desperately trying to &lsquo;push&rsquo; the unlock screen up so I can get to the camera</strong></p>

<p>I&rsquo;m hoping that the design is a bit different when the new (larger/wider) iPhone 6 comes out. Maybe the icon could be moved to the center somewhere or we there could be a little indicator arrow pointing up positioned bottom middle. This could reveal one or two functions on a single tap &ndash; one of which is the camera. It would be much easier to select it &ndash; with either hand!</p>

<p>Hopefully all those right handed people with small hands will have something to celebrate come September 9. It&rsquo;s not a massive thing &ndash; but I believe it would be a UX improvement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[google-store-locator]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/03/14/google-store-locator/"/>
    <updated>2014-03-14T01:51:58+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/03/14/google-store-locator</id>
    <content type="html"><![CDATA[<div id="store-locator-container">
  <div id="page-header">
    <h1>Speed Cameras in and around NSW</h1>

    <p style="width:600px;font-size:1.3em;">
    One of my students at <a href="http://www.thinkful.com">Thinkful</a> wanted to knock up a site utilising the Google Store API. We decided that the easiest way was to use a great jQuery plugin by Bjorn Holine called (not surprisingly) the <a href="http://www.bjornblog.com/web/jquery-store-locator-plugin">jquery-store-locator-plugin</a>.

    So I came up with a speed camera locator for NSW. I had to do a bit of tweaking to the plugin code plus some resource injection for this Octopress post. It took a fair few hours but hopefully the result was worth it. The source data was obtained from the <a href="http://data.gov.au">Australian Government</a>.
    </p>

    <p style="font-size:1.4em;font-weight:bold">Type in a street name in NSW:</p>
  </div>

  <div id="form-container">
    <form id="user-location" method="post" action="#">
        <div id="form-input">
          <label for="address">Enter Address:</label>
          <input type="text" id="address" name="address" />
          <select id="category">
            <option val="40">Up to 40 km/h</option>
            <option val="50">Up to 50 km/h</option>
            <option val="60">Up to 60 km/h</option>
            <option val="70">Up to 70 km/h</option>
            <option val="80">Up to 80 km/h</option>
            <option val="90">Up to 90 km/h</option>
            <option val="100">Up to 100 km/h</option>
            <option val="110">Up to 110 km/h</option>
          </select>
         </div>
        <button id="submit" type="submit">Submit</button>
    </form>
  </div>

  <div id="map-container">
    <div id="loc-list">
        <ul id="list"></ul>
    </div>
    <div id="map"></div>
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to CSS Positioning]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/01/29/introduction-to-css-positioning/"/>
    <updated>2014-01-29T00:00:00+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/01/29/introduction-to-css-positioning</id>
    <content type="html"><![CDATA[<h4>Level: Beginner</h4>

<h3>Introduction</h3>

<p>_The truth about CSS Positioning is that it&rsquo;s a pain in the ****. No matter how many times I read up on the topic, it still eludes me from time to time. I think it&rsquo;s because pages can get pretty complex and each one is different. Well, this article is an attempt to tackle the issue head on with as little fluff as possible. We won&rsquo;t be covering all of the details but we will be providing some basic definitions and examples. Hopefully this can provide beginners with a helpful reference from which the topic can be investigated and hopefully mastered.</p>

<!-- more -->




<iframe style="width: 100%; height: 600px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/TtK6R/embedded/result,html,css/light/"></iframe>


<h3>Conclusion</h3>

<p>As always, I recommend that you do a whole lot of reading on the subject. It will help your understanding. There are some references below which will help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Objects]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/01/22/introduction-to-objects/"/>
    <updated>2014-01-22T00:23:10+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/01/22/introduction-to-objects</id>
    <content type="html"><![CDATA[<h4>Level: Beginner with a couple of small projects under their belt!</h4>

<h3>Introduction</h3>

<p><em>This brief article is designed to be an illustration of how you could utilise objects in your code. It is not meant to be definitive, neither does it claim to be the optimum way of defining/creating objects. It does however aim to be an &lsquo;easy-ish&rsquo; way of getting into objects and how you might use them in a real world scenario.</em></p>

<p><strong>During a mentor session with one of my students, we started talking about how she might approach the Shopping List project. The obvious and simplest approach was (from an implementation point of view) to hold a bunch of String objects inside an array. However, on reflection we felt that this could perhaps be too simplistic. For example, let&rsquo;s say that one of the projects&#8217; requirements was to be able to cross out items on the list instead of deleting the item. It would be pretty hard to implement this if all we had was an Array of String objects.</strong></p>

<!-- more -->


<p><em>Enter the Object</em>. As we discussed the problem, we realised that if we could perhaps have a slightly more complex representation of the item in the list, (after all, each item is a real thing, has certain properties and is certainly more than a just a string of letters!) then perhaps we could give the item a certain state which would mean that it is deleted but not removed from the list &ndash; ie. crossed out.</p>

<p>It seemed to me to be the perfect place to start introducing objects in our mentor sessions. Let&rsquo;s take a look at how we might model a shopping list in Javascript.</p>

<p>Let&rsquo;s say that we have 3 items in our shopping list: Bread, Apples and Whiskey. It would be very simple to implement this as a Javascript Array like so:</p>

<h5>1 &ndash; A Shopping List as an Array of Strings</h5>

<pre><code>// Create the array using the array literal syntax
var myShoppingList = [];

// Add items to the array
myShoppingList.push("Bread");
myShoppingList.push("Apples");
myShoppingList.push("Whiskey");

// Print them to the console
console.log(myShoppingList[0]);
console.log(myShoppingList[1]);
console.log(myShoppingList[2]);
</code></pre>

<p>Done! Its simple but you could argue that it is too &lsquo;simplistic&rsquo;, As an illustration, let&rsquo;s say you wanted to remove an item from the list. Well you could just delete it from the array. The problem is how do you get it back again? Another example of the simplicity of this implementation is that say you wanted to merely cross out items as you added them to your physical shopping basket &ndash; ideally you would want to retain the item in the list but have it notionally deleted &ndash; it would be pretty tricky to implement this behaviour with an Array of Strings. Of course it could be done &ndash; and in numerous ways, however I believe that these &lsquo;solutions&rsquo; would not be as intuitive and robust as a solution that employed an Array of Objects rather than Strings.</p>

<h5>2 &ndash; Introducing the Object way</h5>

<pre><code>// Create the array using the array literal syntax
var myShoppingList = [];

// Create the object literals
var bread = { itemName: "Bread", itemPrice: 3.60, isDeleted: false };
var apples = { itemName: "Apples", itemPrice: 1.60, isDeleted: false };
var whiskey = { itemName: "Whiskey", itemPrice: 100.95, isDeleted: false };

// Add the Objects to the shopping list array
myShoppingList.push(bread);
myShoppingList.push(apples);
myShoppingList.push(whiskey);
</code></pre>

<p>The example above adds 3 objects to the <code>myShoppingList</code> Array. Note that the objects themselves are <em>object literals</em> created with the <code>{}</code> or curly brace syntax. Let&rsquo;s take one of the objects and break it down, before explaining why we gave it the attributes we did. So &ndash; I want a bottle of Whiskey for Christmas, so I added it to my shopping list:</p>

<h5>3 &ndash; Creating an Object &lsquo;Literal&rsquo;</h5>

<pre><code>{ 
    itemName: "Whiskey", 
    itemPrice: 100.95, 
    isDeleted: false
}
</code></pre>

<p>Let us (sort of) digress for a moment. It&rsquo;s pretty clear that I have given my bottle of whiskey 3 properties: a name, a price and an <code>isDeleted</code> property. The name and the price are pretty obvious but the <code>isDeleted</code> property means that I can still have the bottle of whiskey in the list but have it notionally crossed off the list. You could access the whiskey from the Array as follows:</p>

<pre><code>var myWhiskeyBottle = myShoppingList[0];
</code></pre>

<p>You could further access any of the properties of the Whiskey thus:</p>

<h5>4 &ndash; Getting the properties out of an Object</h5>

<pre><code>var nameOfWhiskey = myWhiskeyBottle.name;
var priceOfWhiskey = myWhiskeyBottle.price;
var stateOfWhiskey = myWhiskeyBottle.isDeleted;

console.log(nameOfWhiskey);
console.log(priceOfWhiskey);
console.log(stateOfWhiskey);
</code></pre>

<p>You will notice that I gave the whiskey an <code>isDeleted</code> value of <code>false</code>. So the scenario is as follows:</p>

<p>I&rsquo;m in the Bottle shop and I put my favourite bottle in my trolley. I cross it off my list. Effectively it has been deleted from the list but my requirements dictate that I should still see it on the list with a line through it. So I simply set the <code>isDeleted</code> property to <code>true</code>.</p>

<pre><code>myWhiskeyBottle.isDeleted = true;
</code></pre>

<p>Now let&rsquo;s inspect which items have been deleted in the Array:</p>

<pre><code>console.log("Bread: " + myShoppingList[0].isDeleted);
console.log("Apples: " + myShoppingList[1].isDeleted);
console.log("Whiskey: " + myShoppingList[2].isDeleted);
</code></pre>

<p>Clearly the whiskey has been deleted from the list so now my Shopping list should look like this:</p>

<ul>
<li>Bread,</li>
<li>Apples,</li>
<li><del>Whiskey</del></li>
</ul>


<p>The <code>isDeleted</code> property has given us the ability to provide a richer interface. This is just with a few object literals with a few simple properties. It is worth noting at this point that if we were building a production system we would find another more robust &amp; reusable way to create the objects themselves &ndash; however the point is here to get a sense of their usefulness in this and other non-trivial situations.</p>

<p>Hopefully I have shown the value of starting to use objects in your code where you are trying to model even the simplest of things. Don&rsquo;t worry about starting with a simple object literal. You can get more complex as you begin to understand more about Javascript and system design.</p>

<p>If you have any comments or questions regarding the above please don&rsquo;t hesitate to contact me.</p>

<p>One final thing &ndash; I believe the more you read about a topic (utilising different perspectives and analogies) the more likely you are to understand it well. Therefore I encourage you to find other articles that talk about object creation and read them. I have listed a few below that I believe you may find helpful. Note that this comes with a warning &ndash; some of them are pretty complex so you will have to be prepared for a lot of study if you are anything like me!</p>

<hr />

<p><a href="http://bit.ly/19ll7yX" title="Understanding Javascript Object Creation Patterns">Understanding Javascript Object Creation Patterns</a></p>

<p><a href="http://bit.ly/1eS3t9o" title="Javascript Object Oriented Programming - Part 1">Javascript Object Oriented Programming &ndash; Part 1</a></p>

<p><a href="http://bit.ly/1eS3M3U" title="Beginners Guide to JavaScript Objects, Methods and Attributes">Beginners Guide to JavaScript Objects, Methods and Attributes</a></p>

<p><a href="http://bit.ly/1eS422Q" title="The Basics of Object-Oriented JavaScript | Nettuts+">The Basics of Object-Oriented JavaScript | Nettuts+</a></p>

<hr />

<p><strong>Email: pjanuarius@thinkful.com</strong></p>

<p><strong>Twitter: @peetj</strong></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Beginning of Octopress]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/01/12/first-post/"/>
    <updated>2014-01-12T02:35:59+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/01/12/first-post</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p><em>This is an experiment with Octopress. I&rsquo;ve been using Wordpress for ages. Recently I&rsquo;ve been hankering for a platform that is a lot simpler to use. That may seem a bit strange seeing as it is all commandline, github, Ruby&hellip;etc, but actually I&rsquo;m talking about the writing of the posts as well as the generation of the site. I can write the posts in markdown, run a few commands and I have a site. I don&rsquo;t have to wait for slow http connections and faff around with HTML source code (not that its&#8217; hard &ndash; it is just messy when it shouldn&rsquo;t have to be). If you want to know how to setup and use Octopress&hellip;</em></p>

<!-- more -->


<h3>Setting up Octopress</h3>

<p>This was pretty easy actually. After struggling with Jekyll for a number of days (ultimately, my goal was to host the blog on GitHub and Jekyll just wasn&rsquo;t clear enough) I just happened to come across Octopress. It looked like a good option ie. no database, posts created in markdown or html, a statically generated (quick) site&hellip; so I decided to try it out. Well, I wasn&rsquo;t disappointed.</p>

<p>There is no point me repeating the setup process here &ndash; I will just point you to the relevant link: <a href="http://octopress.org/docs/setup/" title="Octopress Setup">Setting up Octopress</a>. It&rsquo;s very good. Once you have installed Octopress and generated a site you have to deploy it. There are a few options here &ndash; my preferred one was to deploy to GitHub Pages.</p>

<h3>Publishing your first post</h3>

<p>Let&rsquo;s say you are up and running and want to publish your first post. The process is beginning to smooth out nicely for me and goes something like this:</p>

<h4>Assumptions</h4>

<ol>
<li>You have a nice markdown editor and know how to use it (Try <a href="http://mouapp.com/" title="Mou">Mou</a> for the Mac).</li>
<li>You have a <a href="http://github.com" title="GitHub">GitHub</a> account.</li>
<li>You know your way around the terminal.</li>
</ol>


<h4>Deploying to GitHub Pages</h4>

<p>If you get to this stage, you will have installed Octopress as well as the Octopress theme using the command:</p>

<pre><code>rake install
</code></pre>

<p>I&rsquo;m going to suggest that you follow the instructions on <a href="http://octopress.org/docs/deploying/github/">Deploying to GitHub Pages</a>. This involves creating a repository on GitHub and then running a setup command:</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>NB. All of these commands are executed on the terminal from your Octopress directory. Mine is installed at:</p>

<pre><code>/Users/peetj/GitHub/octopress
</code></pre>

<p>Now you are ready to actually publish a post. The great thing about Octopress is that you can publish your posts in <a href="http://daringfireball.net/projects/markdown/">Markdown</a> format. After years of using Wordpress and those ever so slightly dodgy HTML editors, I felt like this would be a breath of fresh air. Don&rsquo;t get me wrong. I&rsquo;ve always loved WordPress especially the user interface and all the great plugins you could make use of. But let&rsquo;s face it, there is a lot of overhead going on there and pretty much like any CMS, it is a pain in the butt for non-techy users &ndash; no matter what the advocates say. Anyway I was right &ndash; now I use a lightweight editor &ndash; Mou (see above) which itself has a live preview mode. I get none of the fluff that is part of Microsoft Word and I get an overall pleasantly enjoyable writing experience.</p>

<p>Posts are generally formatted like this:</p>

<pre><code>yyyy-mm-dd-title-of-post.markdown
</code></pre>

<p>They are placed in the directory:</p>

<pre><code>../octopress/source/_posts
</code></pre>

<p>You can also generate a new post which is probably a better idea because the post will contain some skeleton content. You can read about Octopress <a href="http://octopress.org/docs/blogging/">blogging basics</a> here. Anyway, to generate a post do this:</p>

<pre><code>rake new_post[my-new-post]
</code></pre>

<p>This will create a new (markdown) post in the ../octopress/source/_posts directory called 2014-02-28-my-new-post.markdown (assuming that today is 28 Feb 2014).</p>

<p>So just to recap, we have installed Octopress, we have setup GitHub pages so that we can publish our posts at GitHub and we have created a new post. Now, open up the post in your favourite text editor. It should look something like this:</p>

<pre><code>---
layout: post
title: "my-new-post"
date: 2014-02-28 5:59
comments: true
external-url:
categories:
---
</code></pre>

<p>You can read the details in the &lsquo;Blogging Basics&rsquo; link above about what options you have here but basically Octopress has generated some meta-data for you where you can tell it what to do ie. turn comments on or off, specify the layout, publish as draft (you would add another line that says &lsquo;published: false&rsquo;) and so on. Now that we have a post, we need to commit it to GitHub and publish it.</p>

<h4>Commit to GitHub</h4>

<p>Since we have created some new content, we need to publish it to Github. All we need to do is run the following commands:</p>

<pre><code>git add .
git commit -m "Just created a cool new post"
git push origin source
</code></pre>

<p>The first commands adds any modified/new files to the staging area of your local repository. The second commands commits the files to the local repository. The third command syncs with GitHub. Now that you have all your changes on GitHub you can publish your post.</p>

<h4>Publish your Post</h4>

<p>Run the commands:</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>This generates the new site and publishes the post. The output that follows the command will go something like this:</p>

<pre><code>## Generating Site with Jekyll
unchanged sass/screen.scss
Configuration from /Users/peetj/GitHub/octopress/_config.yml
Building site: source -&gt; public
Successfully generated site: source -&gt; public
## Deploying branch to Github Pages 
## Pulling any updates from Github Pages 
cd _deploy
remote: Counting objects: 12, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 6 (delta 4), reused 6 (delta 4)
Unpacking objects: 100% (6/6), done.
From https://github.com/peetjthinkful/peetjthinkful.github.io
   32853f5..c71fd71  source     -&gt; origin/source
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details

    git pull &lt;remote&gt; &lt;branch&gt;

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/&lt;branch&gt; master

cd -
rm -rf _deploy/assets
rm -rf _deploy/atom.xml
rm -rf _deploy/blog
rm -rf _deploy/CNAME
rm -rf _deploy/favicon.png
rm -rf _deploy/font
rm -rf _deploy/images
rm -rf _deploy/index.html
rm -rf _deploy/javascripts
rm -rf _deploy/robots.txt
rm -rf _deploy/sitemap.xml
rm -rf _deploy/stylesheets

## Copying public to _deploy
cp -r public/. _deploy
cd _deploy

## Committing: Site updated at 2014-01-29 14:10:14 UTC
[master ddfd6ae] Site updated at 2014-01-29 14:10:14 UTC
 12 files changed, 251 insertions(+), 138 deletions(-)
 create mode 100644 blog/categories/published-false/atom.xml
 create mode 100644 blog/categories/published-false/index.html

## Pushing generated _deploy website
Counting objects: 48, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (22/22), done.
Writing objects: 100% (26/26), 3.55 KiB | 0 bytes/s, done.
Total 26 (delta 13), reused 0 (delta 0)
To https://github.com/peetjthinkful/peetjthinkful.github.io.git
   5d1e15b..ddfd6ae  master -&gt; master

## Github Pages deploy complete
</code></pre>

<p>So there you have it! How to make a start with Octopress. There are also many others using Octopress and quite a few of them have written about the transition. These are definitely worth a read if you want to start using Octopress &ndash; so I have listed a few that I have looked at myself below. Happy Blogging!</p>

<h3>Others experiences with Octopress</h3>

<ol>
<li><a href="http://www.multunus.com/blog/2012/10/our-experience-with-jekyll-and-octopress/">Our experience with Jekyll and Octopress &ndash; Leena</a></li>
<li><a href="https://sethvargo.com/moving-to-octopress/">Moving to Octopress &ndash; Seth Vargo</a></li>
<li><a href="http://adis.me/blog/2013/09/27/moving-to-octopress/">Moving to Octopress &ndash; adis.me</a></li>
<li><a href="http://faehnri.ch/moving-to-octopress/">Moving to Octopress &ndash; faehnri.ch</a></li>
<li><a href="https://github.com/imathis/octopress/wiki/Octopress-Sites">Octopress Sites</a></li>
</ol>


<h3>Advanced Octopress Tips</h3>

<ol>
<li><a href="http://thematicnet.com/articles/custom-404-page-for-octopress/">Custom 404 Page for Octopress: Quick Tip</a></li>
<li><a href="http://www.ubergeekunlimited.org/blog/2012/10/16/octopress-tips-and-tricks/">notes from dr. Awkward&rsquo;s holistic geekery</a></li>
<li><a href="http://dev.scottw.com/octopress-tips">Octopress Tips &ndash; Scott Watermasysk</a></li>
<li><a href="http://blog.revolunet.com/blog/2013/04/15/octopress-cheatsheet/">Octopress Cheat Sheet &ndash; revolunet blog</a></li>
<li><a href="http://blog.pixelingene.com/2011/09/tips-for-speeding-up-octopress-site-generation/">Tips for speeding up Octopress Site Generation &ndash; Pixel-in-Gene</a></li>
<li><a href="http://robdodson.me/blog/2012/06/11/some-octopress-rake-tips/">Some Octopress Rake Tips &ndash; Rob Dodson</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
