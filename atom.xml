<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Petes Stuff]]></title>
  <link href="http://peetjthinkful.github.io/atom.xml" rel="self"/>
  <link href="http://peetjthinkful.github.io/"/>
  <updated>2014-09-06T20:51:54+10:00</updated>
  <id>http://peetjthinkful.github.io/</id>
  <author>
    <name><![CDATA[Pete Januarius]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iPhone_photo_app]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/09/06/iphone-photo-app/"/>
    <updated>2014-09-06T12:15:20+10:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/09/06/iphone-photo-app</id>
    <content type="html"><![CDATA[<h3>Rethinking the design of the &lsquo;unlock&rsquo; screen</h3>

<p>If you possess an iPhone, then you will be somewhat familiar with the &lsquo;unlock&rsquo; screen. It would look something like this:</p>

<p><img src="http://peetjthinkful.github.io/images/unlockscreen.png" title="Title" alt="alt text" /></p>

<p><strong>My iPhone unlock screen</strong></p>

<p>The problem I have is that I have quite small hands and being right handed I generally carry my phone in my left hand and use it with my right. &lsquo;So what?&rsquo; you might say! Well when I want to take a picture quickly I try to use my left hand to activate the camera from the camera icon. I usually find the swipe action next to impossible. Firstly my thumb doesn&rsquo;t really reach the icon without a stretch and secondly, because I have to stretch I find that I don&rsquo;t have much mobility in my thumb as a consequence.</p>

<p><img src="http://peetjthinkful.github.io/images/unlockscreen2.jpg" title="Title" alt="alt text" /></p>

<p><strong>Me desperately trying to &lsquo;push&rsquo; the unlock screen up so I can get to the camera</strong></p>

<p>I&rsquo;m hoping that the design is a bit different when the new (larger/wider) iPhone 6 comes out. Maybe the icon could be moved to the center somewhere or we there could be a little indicator arrow pointing up positioned bottom middle. This could reveal one or two functions on a single tap &ndash; one of which is the camera. It would be much easier to select it &ndash; with either hand!</p>

<p>Hopefully all those right handed people with small hands will have something to celebrate come September 9. It&rsquo;s not a massive thing &ndash; but I believe it would be a UX improvement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[google-store-locator]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/03/14/google-store-locator/"/>
    <updated>2014-03-14T01:51:58+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/03/14/google-store-locator</id>
    <content type="html"><![CDATA[<div id="store-locator-container">
  <div id="page-header">
    <h1>Speed Cameras in and around NSW</h1>

    <p style="width:600px;font-size:1.3em;">
    One of my students at <a href="http://www.thinkful.com">Thinkful</a> wanted to knock up a site utilising the Google Store API. We decided that the easiest way was to use a great jQuery plugin by Bjorn Holine called (not surprisingly) the <a href="http://www.bjornblog.com/web/jquery-store-locator-plugin">jquery-store-locator-plugin</a>.

    So I came up with a speed camera locator for NSW. I had to do a bit of tweaking to the plugin code plus some resource injection for this Octopress post. It took a fair few hours but hopefully the result was worth it. The source data was obtained from the <a href="http://data.gov.au">Australian Government</a>.
    </p>

    <p style="font-size:1.4em;font-weight:bold">Type in a street name in NSW:</p>
  </div>

  <div id="form-container">
    <form id="user-location" method="post" action="#">
        <div id="form-input">
          <label for="address">Enter Address:</label>
          <input type="text" id="address" name="address" />
          <select id="category">
            <option val="40">Up to 40 km/h</option>
            <option val="50">Up to 50 km/h</option>
            <option val="60">Up to 60 km/h</option>
            <option val="70">Up to 70 km/h</option>
            <option val="80">Up to 80 km/h</option>
            <option val="90">Up to 90 km/h</option>
            <option val="100">Up to 100 km/h</option>
            <option val="110">Up to 110 km/h</option>
          </select>
         </div>
        <button id="submit" type="submit">Submit</button>
    </form>
  </div>

  <div id="map-container">
    <div id="loc-list">
        <ul id="list"></ul>
    </div>
    <div id="map"></div>
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to CSS Positioning]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/01/29/introduction-to-css-positioning/"/>
    <updated>2014-01-29T00:00:00+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/01/29/introduction-to-css-positioning</id>
    <content type="html"><![CDATA[<h4>Level: Beginner</h4>

<h3>Introduction</h3>

<p>_The truth about CSS Positioning is that it&rsquo;s a pain in the ****. No matter how many times I read up on the topic, it still eludes me from time to time. I think it&rsquo;s because pages can get pretty complex and each one is different. Well, this article is an attempt to tackle the issue head on with as little fluff as possible. We won&rsquo;t be covering all of the details but we will be providing some basic definitions and examples. Hopefully this can provide beginners with a helpful reference from which the topic can be investigated and hopefully mastered.</p>

<!-- more -->




<iframe style="width: 100%; height: 600px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/TtK6R/embedded/result,html,css/light/"></iframe>


<h3>Conclusion</h3>

<p>As always, I recommend that you do a whole lot of reading on the subject. It will help your understanding. There are some references below which will help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Objects]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/01/22/introduction-to-objects/"/>
    <updated>2014-01-22T00:23:10+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/01/22/introduction-to-objects</id>
    <content type="html"><![CDATA[<h4>Level: Beginner with a couple of small projects under their belt!</h4>

<h3>Introduction</h3>

<p><em>This brief article is designed to be an illustration of how you could utilise objects in your code. It is not meant to be definitive, neither does it claim to be the optimum way of defining/creating objects. It does however aim to be an &lsquo;easy-ish&rsquo; way of getting into objects and how you might use them in a real world scenario.</em></p>

<p><strong>During a mentor session with one of my students, we started talking about how she might approach the Shopping List project. The obvious and simplest approach was (from an implementation point of view) to hold a bunch of String objects inside an array. However, on reflection we felt that this could perhaps be too simplistic. For example, let&rsquo;s say that one of the projects&#8217; requirements was to be able to cross out items on the list instead of deleting the item. It would be pretty hard to implement this if all we had was an Array of String objects.</strong></p>

<!-- more -->


<p><em>Enter the Object</em>. As we discussed the problem, we realised that if we could perhaps have a slightly more complex representation of the item in the list, (after all, each item is a real thing, has certain properties and is certainly more than a just a string of letters!) then perhaps we could give the item a certain state which would mean that it is deleted but not removed from the list &ndash; ie. crossed out.</p>

<p>It seemed to me to be the perfect place to start introducing objects in our mentor sessions. Let&rsquo;s take a look at how we might model a shopping list in Javascript.</p>

<p>Let&rsquo;s say that we have 3 items in our shopping list: Bread, Apples and Whiskey. It would be very simple to implement this as a Javascript Array like so:</p>

<h5>1 &ndash; A Shopping List as an Array of Strings</h5>

<pre><code>// Create the array using the array literal syntax
var myShoppingList = [];

// Add items to the array
myShoppingList.push("Bread");
myShoppingList.push("Apples");
myShoppingList.push("Whiskey");

// Print them to the console
console.log(myShoppingList[0]);
console.log(myShoppingList[1]);
console.log(myShoppingList[2]);
</code></pre>

<p>Done! Its simple but you could argue that it is too &lsquo;simplistic&rsquo;, As an illustration, let&rsquo;s say you wanted to remove an item from the list. Well you could just delete it from the array. The problem is how do you get it back again? Another example of the simplicity of this implementation is that say you wanted to merely cross out items as you added them to your physical shopping basket &ndash; ideally you would want to retain the item in the list but have it notionally deleted &ndash; it would be pretty tricky to implement this behaviour with an Array of Strings. Of course it could be done &ndash; and in numerous ways, however I believe that these &lsquo;solutions&rsquo; would not be as intuitive and robust as a solution that employed an Array of Objects rather than Strings.</p>

<h5>2 &ndash; Introducing the Object way</h5>

<pre><code>// Create the array using the array literal syntax
var myShoppingList = [];

// Create the object literals
var bread = { itemName: "Bread", itemPrice: 3.60, isDeleted: false };
var apples = { itemName: "Apples", itemPrice: 1.60, isDeleted: false };
var whiskey = { itemName: "Whiskey", itemPrice: 100.95, isDeleted: false };

// Add the Objects to the shopping list array
myShoppingList.push(bread);
myShoppingList.push(apples);
myShoppingList.push(whiskey);
</code></pre>

<p>The example above adds 3 objects to the <code>myShoppingList</code> Array. Note that the objects themselves are <em>object literals</em> created with the <code>{}</code> or curly brace syntax. Let&rsquo;s take one of the objects and break it down, before explaining why we gave it the attributes we did. So &ndash; I want a bottle of Whiskey for Christmas, so I added it to my shopping list:</p>

<h5>3 &ndash; Creating an Object &lsquo;Literal&rsquo;</h5>

<pre><code>{ 
    itemName: "Whiskey", 
    itemPrice: 100.95, 
    isDeleted: false
}
</code></pre>

<p>Let us (sort of) digress for a moment. It&rsquo;s pretty clear that I have given my bottle of whiskey 3 properties: a name, a price and an <code>isDeleted</code> property. The name and the price are pretty obvious but the <code>isDeleted</code> property means that I can still have the bottle of whiskey in the list but have it notionally crossed off the list. You could access the whiskey from the Array as follows:</p>

<pre><code>var myWhiskeyBottle = myShoppingList[0];
</code></pre>

<p>You could further access any of the properties of the Whiskey thus:</p>

<h5>4 &ndash; Getting the properties out of an Object</h5>

<pre><code>var nameOfWhiskey = myWhiskeyBottle.name;
var priceOfWhiskey = myWhiskeyBottle.price;
var stateOfWhiskey = myWhiskeyBottle.isDeleted;

console.log(nameOfWhiskey);
console.log(priceOfWhiskey);
console.log(stateOfWhiskey);
</code></pre>

<p>You will notice that I gave the whiskey an <code>isDeleted</code> value of <code>false</code>. So the scenario is as follows:</p>

<p>I&rsquo;m in the Bottle shop and I put my favourite bottle in my trolley. I cross it off my list. Effectively it has been deleted from the list but my requirements dictate that I should still see it on the list with a line through it. So I simply set the <code>isDeleted</code> property to <code>true</code>.</p>

<pre><code>myWhiskeyBottle.isDeleted = true;
</code></pre>

<p>Now let&rsquo;s inspect which items have been deleted in the Array:</p>

<pre><code>console.log("Bread: " + myShoppingList[0].isDeleted);
console.log("Apples: " + myShoppingList[1].isDeleted);
console.log("Whiskey: " + myShoppingList[2].isDeleted);
</code></pre>

<p>Clearly the whiskey has been deleted from the list so now my Shopping list should look like this:</p>

<ul>
<li>Bread,</li>
<li>Apples,</li>
<li><del>Whiskey</del></li>
</ul>


<p>The <code>isDeleted</code> property has given us the ability to provide a richer interface. This is just with a few object literals with a few simple properties. It is worth noting at this point that if we were building a production system we would find another more robust &amp; reusable way to create the objects themselves &ndash; however the point is here to get a sense of their usefulness in this and other non-trivial situations.</p>

<p>Hopefully I have shown the value of starting to use objects in your code where you are trying to model even the simplest of things. Don&rsquo;t worry about starting with a simple object literal. You can get more complex as you begin to understand more about Javascript and system design.</p>

<p>If you have any comments or questions regarding the above please don&rsquo;t hesitate to contact me.</p>

<p>One final thing &ndash; I believe the more you read about a topic (utilising different perspectives and analogies) the more likely you are to understand it well. Therefore I encourage you to find other articles that talk about object creation and read them. I have listed a few below that I believe you may find helpful. Note that this comes with a warning &ndash; some of them are pretty complex so you will have to be prepared for a lot of study if you are anything like me!</p>

<hr />

<p><a href="http://bit.ly/19ll7yX" title="Understanding Javascript Object Creation Patterns">Understanding Javascript Object Creation Patterns</a></p>

<p><a href="http://bit.ly/1eS3t9o" title="Javascript Object Oriented Programming - Part 1">Javascript Object Oriented Programming &ndash; Part 1</a></p>

<p><a href="http://bit.ly/1eS3M3U" title="Beginners Guide to JavaScript Objects, Methods and Attributes">Beginners Guide to JavaScript Objects, Methods and Attributes</a></p>

<p><a href="http://bit.ly/1eS422Q" title="The Basics of Object-Oriented JavaScript | Nettuts+">The Basics of Object-Oriented JavaScript | Nettuts+</a></p>

<hr />

<p><strong>Email: pjanuarius@thinkful.com</strong></p>

<p><strong>Twitter: @peetj</strong></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Beginning of Octopress]]></title>
    <link href="http://peetjthinkful.github.io/blog/2014/01/12/first-post/"/>
    <updated>2014-01-12T02:35:59+11:00</updated>
    <id>http://peetjthinkful.github.io/blog/2014/01/12/first-post</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p><em>This is an experiment with Octopress. I&rsquo;ve been using Wordpress for ages. Recently I&rsquo;ve been hankering for a platform that is a lot simpler to use. That may seem a bit strange seeing as it is all commandline, github, Ruby&hellip;etc, but actually I&rsquo;m talking about the writing of the posts as well as the generation of the site. I can write the posts in markdown, run a few commands and I have a site. I don&rsquo;t have to wait for slow http connections and faff around with HTML source code (not that its&#8217; hard &ndash; it is just messy when it shouldn&rsquo;t have to be). If you want to know how to setup and use Octopress&hellip;</em></p>

<!-- more -->


<h3>Setting up Octopress</h3>

<p>This was pretty easy actually. After struggling with Jekyll for a number of days (ultimately, my goal was to host the blog on GitHub and Jekyll just wasn&rsquo;t clear enough) I just happened to come across Octopress. It looked like a good option ie. no database, posts created in markdown or html, a statically generated (quick) site&hellip; so I decided to try it out. Well, I wasn&rsquo;t disappointed.</p>

<p>There is no point me repeating the setup process here &ndash; I will just point you to the relevant link: <a href="http://octopress.org/docs/setup/" title="Octopress Setup">Setting up Octopress</a>. It&rsquo;s very good. Once you have installed Octopress and generated a site you have to deploy it. There are a few options here &ndash; my preferred one was to deploy to GitHub Pages.</p>

<h3>Publishing your first post</h3>

<p>Let&rsquo;s say you are up and running and want to publish your first post. The process is beginning to smooth out nicely for me and goes something like this:</p>

<h4>Assumptions</h4>

<ol>
<li>You have a nice markdown editor and know how to use it (Try <a href="http://mouapp.com/" title="Mou">Mou</a> for the Mac).</li>
<li>You have a <a href="http://github.com" title="GitHub">GitHub</a> account.</li>
<li>You know your way around the terminal.</li>
</ol>


<h4>Deploying to GitHub Pages</h4>

<p>If you get to this stage, you will have installed Octopress as well as the Octopress theme using the command:</p>

<pre><code>rake install
</code></pre>

<p>I&rsquo;m going to suggest that you follow the instructions on <a href="http://octopress.org/docs/deploying/github/">Deploying to GitHub Pages</a>. This involves creating a repository on GitHub and then running a setup command:</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>NB. All of these commands are executed on the terminal from your Octopress directory. Mine is installed at:</p>

<pre><code>/Users/peetj/GitHub/octopress
</code></pre>

<p>Now you are ready to actually publish a post. The great thing about Octopress is that you can publish your posts in <a href="http://daringfireball.net/projects/markdown/">Markdown</a> format. After years of using Wordpress and those ever so slightly dodgy HTML editors, I felt like this would be a breath of fresh air. Don&rsquo;t get me wrong. I&rsquo;ve always loved WordPress especially the user interface and all the great plugins you could make use of. But let&rsquo;s face it, there is a lot of overhead going on there and pretty much like any CMS, it is a pain in the butt for non-techy users &ndash; no matter what the advocates say. Anyway I was right &ndash; now I use a lightweight editor &ndash; Mou (see above) which itself has a live preview mode. I get none of the fluff that is part of Microsoft Word and I get an overall pleasantly enjoyable writing experience.</p>

<p>Posts are generally formatted like this:</p>

<pre><code>yyyy-mm-dd-title-of-post.markdown
</code></pre>

<p>They are placed in the directory:</p>

<pre><code>../octopress/source/_posts
</code></pre>

<p>You can also generate a new post which is probably a better idea because the post will contain some skeleton content. You can read about Octopress <a href="http://octopress.org/docs/blogging/">blogging basics</a> here. Anyway, to generate a post do this:</p>

<pre><code>rake new_post[my-new-post]
</code></pre>

<p>This will create a new (markdown) post in the ../octopress/source/_posts directory called 2014-02-28-my-new-post.markdown (assuming that today is 28 Feb 2014).</p>

<p>So just to recap, we have installed Octopress, we have setup GitHub pages so that we can publish our posts at GitHub and we have created a new post. Now, open up the post in your favourite text editor. It should look something like this:</p>

<pre><code>---
layout: post
title: "my-new-post"
date: 2014-02-28 5:59
comments: true
external-url:
categories:
---
</code></pre>

<p>You can read the details in the &lsquo;Blogging Basics&rsquo; link above about what options you have here but basically Octopress has generated some meta-data for you where you can tell it what to do ie. turn comments on or off, specify the layout, publish as draft (you would add another line that says &lsquo;published: false&rsquo;) and so on. Now that we have a post, we need to commit it to GitHub and publish it.</p>

<h4>Commit to GitHub</h4>

<p>Since we have created some new content, we need to publish it to Github. All we need to do is run the following commands:</p>

<pre><code>git add .
git commit -m "Just created a cool new post"
git push origin source
</code></pre>

<p>The first commands adds any modified/new files to the staging area of your local repository. The second commands commits the files to the local repository. The third command syncs with GitHub. Now that you have all your changes on GitHub you can publish your post.</p>

<h4>Publish your Post</h4>

<p>Run the commands:</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>This generates the new site and publishes the post. The output that follows the command will go something like this:</p>

<pre><code>## Generating Site with Jekyll
unchanged sass/screen.scss
Configuration from /Users/peetj/GitHub/octopress/_config.yml
Building site: source -&gt; public
Successfully generated site: source -&gt; public
## Deploying branch to Github Pages 
## Pulling any updates from Github Pages 
cd _deploy
remote: Counting objects: 12, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 6 (delta 4), reused 6 (delta 4)
Unpacking objects: 100% (6/6), done.
From https://github.com/peetjthinkful/peetjthinkful.github.io
   32853f5..c71fd71  source     -&gt; origin/source
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details

    git pull &lt;remote&gt; &lt;branch&gt;

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/&lt;branch&gt; master

cd -
rm -rf _deploy/assets
rm -rf _deploy/atom.xml
rm -rf _deploy/blog
rm -rf _deploy/CNAME
rm -rf _deploy/favicon.png
rm -rf _deploy/font
rm -rf _deploy/images
rm -rf _deploy/index.html
rm -rf _deploy/javascripts
rm -rf _deploy/robots.txt
rm -rf _deploy/sitemap.xml
rm -rf _deploy/stylesheets

## Copying public to _deploy
cp -r public/. _deploy
cd _deploy

## Committing: Site updated at 2014-01-29 14:10:14 UTC
[master ddfd6ae] Site updated at 2014-01-29 14:10:14 UTC
 12 files changed, 251 insertions(+), 138 deletions(-)
 create mode 100644 blog/categories/published-false/atom.xml
 create mode 100644 blog/categories/published-false/index.html

## Pushing generated _deploy website
Counting objects: 48, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (22/22), done.
Writing objects: 100% (26/26), 3.55 KiB | 0 bytes/s, done.
Total 26 (delta 13), reused 0 (delta 0)
To https://github.com/peetjthinkful/peetjthinkful.github.io.git
   5d1e15b..ddfd6ae  master -&gt; master

## Github Pages deploy complete
</code></pre>

<p>So there you have it! How to make a start with Octopress. There are also many others using Octopress and quite a few of them have written about the transition. These are definitely worth a read if you want to start using Octopress &ndash; so I have listed a few that I have looked at myself below. Happy Blogging!</p>

<h3>Others experiences with Octopress</h3>

<ol>
<li><a href="http://www.multunus.com/blog/2012/10/our-experience-with-jekyll-and-octopress/">Our experience with Jekyll and Octopress &ndash; Leena</a></li>
<li><a href="https://sethvargo.com/moving-to-octopress/">Moving to Octopress &ndash; Seth Vargo</a></li>
<li><a href="http://adis.me/blog/2013/09/27/moving-to-octopress/">Moving to Octopress &ndash; adis.me</a></li>
<li><a href="http://faehnri.ch/moving-to-octopress/">Moving to Octopress &ndash; faehnri.ch</a></li>
<li><a href="https://github.com/imathis/octopress/wiki/Octopress-Sites">Octopress Sites</a></li>
</ol>


<h3>Advanced Octopress Tips</h3>

<ol>
<li><a href="http://thematicnet.com/articles/custom-404-page-for-octopress/">Custom 404 Page for Octopress: Quick Tip</a></li>
<li><a href="http://www.ubergeekunlimited.org/blog/2012/10/16/octopress-tips-and-tricks/">notes from dr. Awkward&rsquo;s holistic geekery</a></li>
<li><a href="http://dev.scottw.com/octopress-tips">Octopress Tips &ndash; Scott Watermasysk</a></li>
<li><a href="http://blog.revolunet.com/blog/2013/04/15/octopress-cheatsheet/">Octopress Cheat Sheet &ndash; revolunet blog</a></li>
<li><a href="http://blog.pixelingene.com/2011/09/tips-for-speeding-up-octopress-site-generation/">Tips for speeding up Octopress Site Generation &ndash; Pixel-in-Gene</a></li>
<li><a href="http://robdodson.me/blog/2012/06/11/some-octopress-rake-tips/">Some Octopress Rake Tips &ndash; Rob Dodson</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
